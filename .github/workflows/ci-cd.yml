name: MLOps CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: volunteer-predictor
  S3_BUCKET: volunteer-mlops-dvc-hk4304

jobs:
  train-and-build:
    name: Train Model & Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify AWS connection
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          aws s3 ls s3://${{ env.S3_BUCKET }} || echo "Bucket is empty or newly created"
      
      - name: Configure DVC
        run: |
          dvc remote modify myremote region ${{ env.AWS_REGION }}
          dvc remote list
      
      - name: Pull data from DVC
        run: |
          echo "Pulling data from S3..."
          dvc pull -v || echo "No data to pull (first run)"
      
      - name: Run DVC pipeline
        run: |
          echo "Running ML pipeline..."
          dvc repro -v
      
      - name: Show metrics
        run: |
          echo "=== Model Performance Metrics ==="
          cat metrics/metrics.json
          echo ""
          dvc metrics show
      
      - name: Show experiments
        run: |
          echo "=== Experiment Tracking ==="
          dvc exp show --no-pager || true
      
      - name: Push DVC outputs to S3
        run: |
          echo "Pushing models and data to S3..."
          dvc push -v
      
      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-metrics
          path: metrics/metrics.json
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "âœ… Image pushed successfully!"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Generate deployment summary
        run: |
          echo "# ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: volunteer-predictor" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ap-south-1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Model Metrics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat metrics/metrics.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Git Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('metrics/metrics.json', 'utf8'));
            
            const comment = `
            ## ðŸŽ¯ ML Pipeline Results
            
            ### Model Performance
            | Metric | Value |
            |--------|-------|
            | RÂ² Score | ${metrics.r2.toFixed(4)} |
            | MSE | ${metrics.mse.toFixed(4)} |
            | MAE | ${metrics.mae.toFixed(4)} |
            
            ### Docker Image
            \`\`\`
            ${{ steps.build-image.outputs.image }}
            \`\`\`
            
            ### Details
            - **Commit**: \`${{ github.sha }}\`
            - **Region**: ap-south-1
            - **Timestamp**: ${new Date().toUTCString()}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  test-docker-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: train-and-build
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Pull and test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Pulling latest image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Starting container..."
          docker run -d -p 5000:5000 --name test-container $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Waiting for container to be ready..."
          sleep 10
          
          echo "Testing health endpoint..."
          curl -f http://localhost:5000/health || exit 1
          
          echo "Testing model-info endpoint..."
          curl -f http://localhost:5000/model-info || exit 1
          
          echo "âœ… Docker image tests passed!"
          
          docker stop test-container
          docker rm test-container
